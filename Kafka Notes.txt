Start the ZooKeeper
Start the Kafka server
Create topic quickstart
- you can describe the topic

kafka-topics.sh	- run kafka topics, it will show number of partition

Start producer
-It is a console based. It will allow us to store or communicate with producer.

Start consumer
- It will receive message from the producer.

----------------------------------------------------------------------------------------

What is Kafka? ðŸ¤”
Apache Kafka is like a big message hub that helps different parts of an application talk to each other in a fast and reliable way. Imagine it as a real-time post office ðŸ“¬ that collects, stores, and delivers messages between different services or applications.

Breaking It Down Simply
1. Producer (Sender)
Think of this as someone dropping letters into a mailbox.
A producer sends messages (data) to Kafka.
2. Kafka (The Post Office)
Kafka stores these messages safely until they are picked up.
It can handle millions of messages per second without slowing down. ðŸš€
3. Consumer (Receiver)
Consumers are like people picking up their letters from the post office.
They read messages from Kafka when they need them.

Real-Life Example: Netflix ðŸŽ¥
Producer: When you click "Play" on a movie, Netflix sends a message to Kafka about your action.
Kafka (Post Office): Kafka stores this action and makes sure it gets sent to the right places.
Consumer: The recommendation system receives your watch history and updates your "Recommended for You" section in real-time.

Why is Kafka Useful?
âœ… Fast & Scalable: Handles huge amounts of data efficiently.
âœ… Reliable: Stores messages safely until they are delivered.
âœ… Decouples Services: Systems donâ€™t need to talk to each other directly; they just use Kafka.



------------------------------------------------------------------------------------------------------------------

STEP 1: OPEN CMD TO THIS FILE LOCATION
COMMAND:
$ tar -xzf kafka_2.13-3.9.0.tgz
$ cd kafka_2.13-3.9.0

Step 2: Start the Kafka environment
NOTE: Your local environment must have Java 8+ installed.
Apache Kafka can be started using KRaft or ZooKeeper. To get started with either configuration follow one of the sections below but not both.

````````````Kafka with KRaft``````````````````
Kafka can be run using KRaft mode using local scripts and downloaded files or the docker image. Follow one of the sections below but not both to start the kafka server.
Using downloaded files

COMMANDS:
Generate a Cluster UUID
	$ KAFKA_CLUSTER_ID="$(bin/kafka-storage.sh random-uuid)"
Format Log Directories

	$ bin/kafka-storage.sh format --standalone -t $KAFKA_CLUSTER_ID -c config/kraft/reconfig-server.properties
Start the Kafka Server

	$ bin/kafka-server-start.sh config/kraft/reconfig-server.properties
Once the Kafka server has successfully launched, you will have a basic Kafka environment running and ready to use.

Using JVM Based Apache Kafka Docker Image
Get the Docker image:

	$ docker pull apache/kafka:3.9.0
Start the Kafka Docker container:

	$ docker run -p 9092:9092 apache/kafka:3.9.0
Using GraalVM Based Native Apache Kafka Docker Image
Get the Docker image:

	$ docker pull apache/kafka-native:3.9.0
Start the Kafka Docker container:

	$ docker run -p 9092:9092 apache/kafka-native:3.9.0
	
	
	--------OR-----------
	
`````````````````````Kafka with ZooKeeper`````````````````````
Run the following commands in order to start all services in the correct order:
COMMAND:
	# Start the ZooKeeper service
	$ bin/zookeeper-server-start.sh config/zookeeper.properties
Open another terminal session and run:

COMMAND:
	# Start the Kafka broker service
	$ bin/kafka-server-start.sh config/server.properties
Once all services have successfully launched, you will have a basic Kafka environment running and ready to use.

Step 3: Create a topic to store your events
Kafka is a distributed event streaming platform that lets you read, write, store, and process events (also called records or messages in the documentation) across many machines.

Example events are payment transactions, geolocation updates from mobile phones, shipping orders, sensor measurements from IoT devices or medical equipment, and much more. These events are organized and stored in topics. Very simplified, a topic is similar to a folder in a filesystem, and the events are the files in that folder.

So before you can write your first events, you must create a topic. Open another terminal session and run:
COMMAND:
	$ bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092
	
	Example: bin/kafka-topics.sh --create --topic {Topic Name} --bootstrap-server localhost:9092
	
All of Kafka's command line tools have additional options: run the kafka-topics.sh command without any arguments to display usage information. For example, it can also show you details such as the partition count of the new topic:
COMMAND:
	$ bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server localhost:9092
	Topic: quickstart-events        TopicId: NPmZHyhbR9y00wMglMH2sg PartitionCount: 1       ReplicationFactor: 1	Configs:
	Topic: quickstart-events Partition: 0    Leader: 0   Replicas: 0 Isr: 0


Step 4: Write some events into the topic
A Kafka client communicates with the Kafka brokers via the network for writing (or reading) events. Once received, the brokers will store the events in a durable and fault-tolerant manner for as long as you needâ€”even forever.
Run the console producer client to write a few events into your topic. By default, each line you enter will result in a separate event being written to the topic.
COMMAND:
	$ bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9092
	>This is my first event
	>This is my second event
You can stop the producer client with Ctrl-C at any time.

Step 5: Read the events
Open another terminal session and run the console consumer client to read the events you just created:
COMMAND:
	$ bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server localhost:9092
	This is my first event
	This is my second event
	
	Example : bin/kafka-console-consumer.sh --topic {Topic Name} --from-beginning --bootstrap-server localhost:9092
You can stop the consumer client with Ctrl-C at any time.

Feel free to experiment: for example, switch back to your producer terminal (previous step) to write additional events, and see how the events immediately show up in your consumer terminal.

Because events are durably stored in Kafka, they can be read as many times and by as many consumers as you want. You can easily verify this by opening yet another terminal session and re-running the previous command again.